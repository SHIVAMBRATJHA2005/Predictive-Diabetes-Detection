
import streamlit as st
import pandas as pd
import numpy as np
import pickle
import requests
from io import BytesIO

# --- Helper Functions ---
st.set_page_config(layout="wide")


@st.cache_resource
def load_pickle_from_url(url, label):
    """Download and load pickle file from URL with error handling."""
    try:
        response = requests.get(url)
        response.raise_for_status()
        return pickle.load(BytesIO(response.content))
    except requests.exceptions.RequestException as e:
        st.error(f"‚ùå Failed to fetch {label}: {e}")
    except ModuleNotFoundError as e:
        st.error(f"‚ùå Missing module while loading {label}: {e}")
    except Exception as e:
        st.error(f"‚ùå Unexpected error loading {label}: {e}")
    return None

def binary_radio(label):
    """Reusable radio input for binary Yes/No questions."""
    return 1 if st.radio(label, ["No", "Yes"]) == "Yes" else 0

# --- Load Model and Scaler ---
model_url = "https://github.com/Om-Kumar-Ace/Diabetes-Health-Indicator/raw/main/logistic_model.pkl"
scaler_url = "https://github.com/Om-Kumar-Ace/Diabetes-Health-Indicator/raw/main/scaler.pkl"

model = load_pickle_from_url(model_url, "model")
scaler = load_pickle_from_url(scaler_url, "scaler")

# Stop if loading fails
if model is None or scaler is None:
    st.stop()

# Check if scaler has feature names
try:
    feature_order = scaler.feature_names_in_
except AttributeError:
    st.error("‚ùå Scaler object missing 'feature_names_in_' attribute.")
    st.stop()

# --- UI Setup ---
st.title("PREDICTIVE MODEL FOR DIABETES DETECTION")
st.markdown("""
This app uses a machine learning model to predict a person's risk of diabetes based on factors like age, BMI, physical activity, smoking, and diet.

Fill out the form below to get an instant prediction.

""")
st.markdown("---")

# --- Input Form ---
with st.form("prediction_form"):
    st.markdown("### üìù Patient Details")

    inputs = {}
    inputs["Sex"] = 1 if st.selectbox("Gender", ["Male", "Female"]) == "Male" else 0
    inputs["Age"] = st.number_input("Age", min_value=0, max_value=120, step=1)
    inputs["BMI"] = st.number_input("BMI (Body Mass Index)", min_value=10.0, max_value=60.0, step=0.1)
    inputs["GenHlth"] = st.slider("General Health (1 = Excellent, 5 = Poor)", min_value=1, max_value=5)

    # Binary questions
    inputs["HighChol"] = binary_radio("Do you have high cholesterol?")
    inputs["Smoker"] = binary_radio("Have you smoked at least 100 cigarettes in your life?")
    inputs["Fake"] = binary_radio("Are you a chain smoker?")
    inputs["PhysActivity"] = binary_radio("Physical activity in past 30 days (excluding job)?")
    inputs["Fruits"] = binary_radio("Consume fruit 1+ times per day?")
    inputs["Veggies"] = binary_radio("Consume vegetables 1+ times per day?")
    inputs["DiffWalk"] = binary_radio("Do you have difficulty walking?")

    submitted = st.form_submit_button("üöÄ Predict")

# --- Prediction Logic ---
if submitted:
    # Basic input validation
    if inputs["Age"] < 1:
        st.warning("‚ö†Ô∏è Please enter valid Age")
    else:
        try:
            input_df = pd.DataFrame([inputs])[feature_order]
            scaled_input = scaler.transform(input_df)
            prediction = model.predict(scaled_input)[0]
            probability = model.predict_proba(scaled_input)[0][1]

            if prediction == 0:
                st.success("üéâ Prediction: Non-Diabetic")
                st.info(f"üìä Probability of diabetes: **{probability*100:.2f}%**")
                st.balloons()
            else:
                st.warning("‚ö†Ô∏è Prediction: Diabetic")
                st.info(f"üìä Probability of diabetes: **{probability*100:.2f}%**")

            # # Optional: Model confidence feedback
            # if 0.45 <= probability <= 0.55:
            #     st.info("üßê Note: Model confidence is moderate. Consider consulting a professional.")

        except Exception as e:
            st.error("‚ùå Prediction failed. Please check inputs or try again later.")
            st.text(f"Technical details: {e}")

# --- Footer ---
st.markdown("---")
st.caption("‚ö†Ô∏è This prediction is generated by a machine learning model and is for informational purposes only. Please consult a healthcare professional for medical advice.")
st.markdown("""
#### üë• Authors:
- Sk Tahsin Raza  
- Shivam Brat  
- Anurag Kumar Singh  
- Md Firdos Alam  
- Md Irfan
""")
